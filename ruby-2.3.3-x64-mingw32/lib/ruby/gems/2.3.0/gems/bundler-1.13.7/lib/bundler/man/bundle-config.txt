BUNDLE-CONFIG(1)					      BUNDLE-CONFIG(1)



1mNAME0m
       1mbundle-config 22m- Set bundler configuration options

1mSYNOPSIS0m
       1mbundle config 22m[4mname24m [4mvalue24m]]

1mDESCRIPTION0m
       This  command  allows you to interact with bundler's configuration sys-
       tem. Bundler retrieves its configuration  from  the  local  application
       (1mapp/.bundle/config22m), environment variables, and the user's home direc-
       tory (1m~/.bundle/config22m), in that order of priority.

       Executing 1mbundle config 22mwith no parameters will print  a  list  of	all
       bundler configuration for the current bundle, and where that configura-
       tion was set.

       Executing 1mbundle config <name> 22mwill print the value of that  configura-
       tion setting, and where it was set.

       Executing  1mbundle  config <name> <value> 22mwill set that configuration to
       the value specified for all bundles executed as the current  user.  The
       configuration  will  be	stored in 1m~/.bundle/config22m. If 4mname24m already is
       set, 4mname24m will be overridden and user will be warned.

       Executing 1mbundle config --global  <name>  <value>  22mworks  the  same  as
       above.

       Executing 1mbundle config --local <name> <value> 22mwill set that configura-
       tion to the local application. The  configuration  will	be  stored  in
       1mapp/.bundle/config22m.

       Executing  1mbundle  config --delete <name> 22mwill delete the configuration
       in both local and global  sources.  Not	compatible  with  --global  or
       --local flag.

       Executing bundle with the 1mBUNDLE_IGNORE_CONFIG 22menvironment variable set
       will cause it to ignore all configuration.

       Executing 1mbundle config disable_multisource true 22mupgrades  the  warning
       about the Gemfile containing multiple primary sources to an error. Exe-
       cuting 1mbundle config --delete disable_multisource 22mdowngrades this error
       to a warning.

1mREMEMBERING OPTIONS0m
       Flags  passed  to 1mbundle install 22mor the Bundler runtime, such as 1m--path0m
       1mfoo 22mor 1m--without production22m, are not remembered  between  commands.  If
       these  options  must be remembered,they must be set using 1mbundle config0m
       (e.g., 1mbundle config path foo22m).

       The options that can be configured are:

       1mbinstubs0m
	      Creates a directory (defaults to 1m~/bin22m) and place  any  executa-
	      bles from the gem there. These executables run in Bundler's con-
	      text. If used, you might add this  directory  to	your  environ-
	      ment's  1mPATH 22mvariable. For instance, if the 1mrails 22mgem comes with
	      a 1mrails 22mexecutable, this flag will create a 1mbin/rails 22mexecutable
	      that  ensures  that  all	referred dependencies will be resolved
	      using the bundled gems.

       1mdeployment0m
	      In deployment mode, Bundler will 'roll-out' the bundle for  1mpro-0m
	      1mduction  22muse.  Please  check  carefully if you want to have this
	      option enabled in 1mdevelopment 22mor 1mtest 22menvironments.

       1mpath	22mThe location to install the specified gems to. This defaults  to
	      Rubygems'  setting.  Bundler shares this location with Rubygems,
	      1mgem install ... 22mwill have gem installed there,  too.  Therefore,
	      gems  installed  without	a  1m--path  ... 22msetting will show up by
	      calling 1mgem list22m. Accodingly, gems installed to other  locations
	      will not get listed.

       1mwithout0m
	      A space-separated list of groups referencing gems to skip during
	      installation.

1mBUILD OPTIONS0m
       You can use 1mbundle config 22mto give bundler the flags to pass to the	gem
       installer every time bundler tries to install a particular gem.

       A  very	common	example, the 1mmysql 22mgem, requires Snow Leopard users to
       pass configuration flags to 1mgem install 22mto specify where  to  find	the
       1mmysql_config 22mexecutable.



	   gem install mysql -- --with-mysql-config=/usr/local/mysql/bin/mysql_config



       Since  the specific location of that executable can change from machine
       to machine, you can specify these flags on a per-machine basis.



	   bundle config build.mysql --with-mysql-config=/usr/local/mysql/bin/mysql_config



       After running this command, every time bundler  needs  to  install  the
       1mmysql 22mgem, it will pass along the flags you specified.

1mCONFIGURATION KEYS0m
       Configuration  keys  in	bundler have two forms: the canonical form and
       the environment variable form.

       For instance, passing the 1m--without  22mflag  to  bundle  install(1)  4mbun-0m
       4mdle-install.1.html24m	prevents  Bundler  from  installing  certain groups
       specified in the Gemfile(5). Bundler persists this value  in  1mapp/.bun-0m
       1mdle/config  22mso that calls to 1mBundler.setup 22mdo not try to find gems from
       the 1mGemfile 22mthat you didn't install. Additionally, subsequent calls  to
       bundle  install(1) 4mbundle-install.1.html24m remember this setting and skip
       those groups.

       The canonical form of this configuration is 1m"without"22m. To  convert	the
       canonical  form	to  the  environment variable form, capitalize it, and
       prepend 1mBUNDLE_22m. The environment variable form  of	1m"without"  22mis  1mBUN-0m
       1mDLE_WITHOUT22m.

       Any  periods in the configuration keys must be replaced with two under-
       scores when setting it via environment variables. The configuration key
       1mlocal.rack 22mbecomes the environment variable 1mBUNDLE_LOCAL__RACK22m.

1mLIST OF AVAILABLE KEYS0m
       The  following  is  a list of all configuration keys and their purpose.
       You can learn more about their  operation  in  bundle  install(1)  4mbun-0m
       4mdle-install.1.html24m.

       o   1mpath  22m(1mBUNDLE_PATH22m):  The	location  on disk where all gems in your
	   bundle will be located regardless of 1m$GEM_HOME 22mor 1m$GEM_PATH 22mvalues.
	   Bundle  gems not found in this location will be installed by 1mbundle0m
	   1minstall22m. Defaults to 1mGem.dir22m. When --deployment is  used,	defaults
	   to vendor/bundle.

       o   1mfrozen  22m(1mBUNDLE_FROZEN22m):  Disallow changes to the 1mGemfile22m. Defaults
	   to 1mtrue 22mwhen 1m--deployment 22mis used.

       o   1mwithout 22m(1mBUNDLE_WITHOUT22m): A 1m:22m-separated list of groups  whose  gems
	   bundler should not install

       o   1mbin  22m(1mBUNDLE_BIN22m):  Install  executables from gems in the bundle to
	   the specified directory. Defaults to 1mfalse22m.

       o   1mgemfile 22m(1mBUNDLE_GEMFILE22m): The name of the file that bundler  should
	   use	as  the 1mGemfile22m. This location of this file also sets the root
	   of the project, which is used to resolve relative paths in the 1mGem-0m
	   1mfile22m,  among  other things. By default, bundler will search up from
	   the current working directory until it finds a 1mGemfile22m.

       o   1mssl_ca_cert 22m(1mBUNDLE_SSL_CA_CERT22m): Path to a designated CA	certifi-
	   cate  file  or  folder containing multiple certificates for trusted
	   CAs in PEM format.

       o   1mssl_client_cert 22m(1mBUNDLE_SSL_CLIENT_CERT22m): Path to a designated file
	   containing a X.509 client certificate and key in PEM format.

       o   1mcache_path  22m(1mBUNDLE_CACHE_PATH22m):  The  directory  that bundler will
	   place cached gems in when running 1mbundle package22m, and that  bundler
	   will look in when installing gems.

       o   1mdisable_multisource  22m(1mBUNDLE_DISABLE_MULTISOURCE22m):  When  set, Gem-
	   files containing multiple sources will produce  errors  instead  of
	   warnings. Use 1mbundle config --delete disable_multisource 22mto unset.

       o   1mignore_messages 22m(1mBUNDLE_IGNORE_MESSAGES22m): When set, no post install
	   messages will be printed. To silence a single gem, use dot notation
	   like 1mignore_messages.httparty true22m.

       o   1mretry  22m(1mBUNDLE_RETRY22m):  The number of times to retry failed network
	   requests. Defaults to 1m322m.

       o   1mredirect 22m(1mBUNDLE_REDIRECT22m): The number  of  redirects  allowed  for
	   network requests. Defaults to 1m522m.

       o   1mtimeout 22m(1mBUNDLE_TIMEOUT22m): The seconds allowed before timing out for
	   network requests. Defaults to 1m1022m.



       In general, you should set these settings per-application by using  the
       applicable  flag to the bundle install(1) 4mbundle-install.1.html24m or bun-
       dle package(1) 4mbundle-package.1.html24m command.

       You can set them globally either via environment  variables  or	1mbundle0m
       1mconfig22m,  whichever is preferable for your setup. If you use both, envi-
       ronment variables will take preference over global settings.

1mLOCAL GIT REPOS0m
       Bundler also allows you	to  work  against  a  git  repository  locally
       instead of using the remote version. This can be achieved by setting up
       a local override:



	   bundle config local.GEM_NAME /path/to/local/git/repository



       For example, in order to use a local Rack repository, a developer could
       call:



	   bundle config local.rack ~/Work/git/rack



       Now  instead of checking out the remote git repository, the local over-
       ride will be used. Similar to a path source, every time the  local  git
       repository  change, changes will be automatically picked up by Bundler.
       This means a commit in the local git repo will update the  revision  in
       the 1mGemfile.lock 22mto the local git repo revision. This requires the same
       attention as git submodules. Before pushing to the remote, you need  to
       ensure the local override was pushed, otherwise you may point to a com-
       mit that only exists in your local machine.

       Bundler does many checks to ensure a developer won't work with  invalid
       references.  Particularly,  we force a developer to specify a branch in
       the 1mGemfile 22min order to use this feature. If the  branch  specified  in
       the  1mGemfile  22mand the current branch in the local git repository do not
       match, Bundler will abort. This ensures	that  a  developer  is	always
       working	against  the correct branches, and prevents accidental locking
       to a different branch.

       Finally, Bundler also ensures that the current  revision  in  the  1mGem-0m
       1mfile.lock  22mexists  in  the local git repository. By doing this, Bundler
       forces you to fetch the latest changes in the remotes.

1mMIRRORS OF GEM SOURCES0m
       Bundler supports overriding gem sources with mirrors. This  allows  you
       to configure rubygems.org as the gem source in your Gemfile while still
       using your mirror to fetch gems.



	   bundle config mirror.SOURCE_URL MIRROR_URL



       For example, to use a mirror of rubygems.org hosted at



	   bundle config mirror.http://rubygems.org http://rubygems-mirror.org



1mCREDENTIALS FOR GEM SOURCES0m
       Bundler allows you to configure credentials for any gem	source,  which
       allows you to avoid putting secrets into your Gemfile.



	   bundle config SOURCE_HOSTNAME USERNAME:PASSWORD



       For  example,  to  save	the  credentials of user 1mclaudette 22mfor the gem
       source at 1mgems.longerous.com22m, you would run:



	   bundle config gems.longerous.com claudette:s00pers3krit



       Or you can set the credentials as an environment variable like this:



	   export BUNDLE_GEMS__LONGEROUS__COM="claudette:s00pers3krit"






				 December 2016		      BUNDLE-CONFIG(1)
